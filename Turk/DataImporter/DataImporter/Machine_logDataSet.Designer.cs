//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataImporter {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Machine_logDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Machine_logDataSet : global::System.Data.DataSet {
        
        private SIO2_LogsDataTable tableSIO2_Logs;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Machine_logDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected Machine_logDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SIO2_Logs"] != null)) {
                    base.Tables.Add(new SIO2_LogsDataTable(ds.Tables["SIO2_Logs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SIO2_LogsDataTable SIO2_Logs {
            get {
                return this.tableSIO2_Logs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            Machine_logDataSet cln = ((Machine_logDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SIO2_Logs"] != null)) {
                    base.Tables.Add(new SIO2_LogsDataTable(ds.Tables["SIO2_Logs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableSIO2_Logs = ((SIO2_LogsDataTable)(base.Tables["SIO2_Logs"]));
            if ((initTable == true)) {
                if ((this.tableSIO2_Logs != null)) {
                    this.tableSIO2_Logs.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "Machine_logDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Machine_logDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSIO2_Logs = new SIO2_LogsDataTable();
            base.Tables.Add(this.tableSIO2_Logs);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSIO2_Logs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Machine_logDataSet ds = new Machine_logDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SIO2_LogsRowChangeEventHandler(object sender, SIO2_LogsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SIO2_LogsDataTable : global::System.Data.TypedTableBase<SIO2_LogsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnImportDate;
            
            private global::System.Data.DataColumn columnFileName;
            
            private global::System.Data.DataColumn columnFiletpye;
            
            private global::System.Data.DataColumn columnProcessmodul;
            
            private global::System.Data.DataColumn columnLotnumber;
            
            private global::System.Data.DataColumn columnSlotnumber;
            
            private global::System.Data.DataColumn columnProcessID;
            
            private global::System.Data.DataColumn columnDateAndTime;
            
            private global::System.Data.DataColumn columnHeaderWaferID;
            
            private global::System.Data.DataColumn columnRecipe;
            
            private global::System.Data.DataColumn columnMachine_ID;
            
            private global::System.Data.DataColumn columnPCName;
            
            private global::System.Data.DataColumn columnParameterProcessTime;
            
            private global::System.Data.DataColumn columnChuckDrivePositionCountActual;
            
            private global::System.Data.DataColumn columnChuckTempControlDCBiasActVoltage;
            
            private global::System.Data.DataColumn columnChuckTempControlSensor;
            
            private global::System.Data.DataColumn columnCurrentStepNumber;
            
            private global::System.Data.DataColumn columnDCActualCurrent;
            
            private global::System.Data.DataColumn columnDCActualPower;
            
            private global::System.Data.DataColumn columnDCActualVoltage;
            
            private global::System.Data.DataColumn columnDCHardArcPerRun;
            
            private global::System.Data.DataColumn columnDCMicroArcPerRun;
            
            private global::System.Data.DataColumn columnDCPowerCorrection;
            
            private global::System.Data.DataColumn columnDCShieldLifeCounter;
            
            private global::System.Data.DataColumn columnDCTargetLifeCounter;
            
            private global::System.Data.DataColumn columnFlexiCathMagnetPositionSensor;
            
            private global::System.Data.DataColumn columnGasVacuumSystemGas1Sensor;
            
            private global::System.Data.DataColumn columnGasVacuumSystemGas3Sensor;
            
            private global::System.Data.DataColumn columnGasVacuumSystemPressureReaderManagerPressure;
            
            private global::System.Data.DataColumn columnGasVacuumSystemPressureReaderManagerWiderangeGaugeSensor;
            
            private global::System.Data.DataColumn columnMatchingSeriesCapacitorPositionSensor;
            
            private global::System.Data.DataColumn columnMatchingShuntCapacitorPositionSensor;
            
            private global::System.Data.DataColumn columnProcessTimerTimeCorrection;
            
            private global::System.Data.DataColumn columnRFBiasDCVoltageSensor;
            
            private global::System.Data.DataColumn columnRFBiasLoadPowerCorrection;
            
            private global::System.Data.DataColumn columnRFBiasLoadPowerSensor;
            
            private global::System.Data.DataColumn columnRFBiasReflectedPowerSensor;
            
            private global::System.Data.DataColumn columnWaferIDRead;
            
            private global::System.Data.DataColumn columnzzEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsDataTable() {
                this.TableName = "SIO2_Logs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SIO2_LogsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SIO2_LogsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ImportDateColumn {
                get {
                    return this.columnImportDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FiletpyeColumn {
                get {
                    return this.columnFiletpye;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProcessmodulColumn {
                get {
                    return this.columnProcessmodul;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LotnumberColumn {
                get {
                    return this.columnLotnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SlotnumberColumn {
                get {
                    return this.columnSlotnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProcessIDColumn {
                get {
                    return this.columnProcessID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateAndTimeColumn {
                get {
                    return this.columnDateAndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HeaderWaferIDColumn {
                get {
                    return this.columnHeaderWaferID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecipeColumn {
                get {
                    return this.columnRecipe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Machine_IDColumn {
                get {
                    return this.columnMachine_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PCNameColumn {
                get {
                    return this.columnPCName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ParameterProcessTimeColumn {
                get {
                    return this.columnParameterProcessTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ChuckDrivePositionCountActualColumn {
                get {
                    return this.columnChuckDrivePositionCountActual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ChuckTempControlDCBiasActVoltageColumn {
                get {
                    return this.columnChuckTempControlDCBiasActVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ChuckTempControlSensorColumn {
                get {
                    return this.columnChuckTempControlSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CurrentStepNumberColumn {
                get {
                    return this.columnCurrentStepNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCActualCurrentColumn {
                get {
                    return this.columnDCActualCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCActualPowerColumn {
                get {
                    return this.columnDCActualPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCActualVoltageColumn {
                get {
                    return this.columnDCActualVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCHardArcPerRunColumn {
                get {
                    return this.columnDCHardArcPerRun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCMicroArcPerRunColumn {
                get {
                    return this.columnDCMicroArcPerRun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCPowerCorrectionColumn {
                get {
                    return this.columnDCPowerCorrection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCShieldLifeCounterColumn {
                get {
                    return this.columnDCShieldLifeCounter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCTargetLifeCounterColumn {
                get {
                    return this.columnDCTargetLifeCounter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FlexiCathMagnetPositionSensorColumn {
                get {
                    return this.columnFlexiCathMagnetPositionSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GasVacuumSystemGas1SensorColumn {
                get {
                    return this.columnGasVacuumSystemGas1Sensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GasVacuumSystemGas3SensorColumn {
                get {
                    return this.columnGasVacuumSystemGas3Sensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GasVacuumSystemPressureReaderManagerPressureColumn {
                get {
                    return this.columnGasVacuumSystemPressureReaderManagerPressure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GasVacuumSystemPressureReaderManagerWiderangeGaugeSensorColumn {
                get {
                    return this.columnGasVacuumSystemPressureReaderManagerWiderangeGaugeSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MatchingSeriesCapacitorPositionSensorColumn {
                get {
                    return this.columnMatchingSeriesCapacitorPositionSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MatchingShuntCapacitorPositionSensorColumn {
                get {
                    return this.columnMatchingShuntCapacitorPositionSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProcessTimerTimeCorrectionColumn {
                get {
                    return this.columnProcessTimerTimeCorrection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RFBiasDCVoltageSensorColumn {
                get {
                    return this.columnRFBiasDCVoltageSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RFBiasLoadPowerCorrectionColumn {
                get {
                    return this.columnRFBiasLoadPowerCorrection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RFBiasLoadPowerSensorColumn {
                get {
                    return this.columnRFBiasLoadPowerSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RFBiasReflectedPowerSensorColumn {
                get {
                    return this.columnRFBiasReflectedPowerSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WaferIDReadColumn {
                get {
                    return this.columnWaferIDRead;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn zzEventColumn {
                get {
                    return this.columnzzEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsRow this[int index] {
                get {
                    return ((SIO2_LogsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SIO2_LogsRowChangeEventHandler SIO2_LogsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SIO2_LogsRowChangeEventHandler SIO2_LogsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SIO2_LogsRowChangeEventHandler SIO2_LogsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SIO2_LogsRowChangeEventHandler SIO2_LogsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSIO2_LogsRow(SIO2_LogsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsRow AddSIO2_LogsRow(
                        System.DateTime ImportDate, 
                        string FileName, 
                        string Filetpye, 
                        string Processmodul, 
                        string Lotnumber, 
                        string Slotnumber, 
                        string ProcessID, 
                        System.DateTime DateAndTime, 
                        string HeaderWaferID, 
                        string Recipe, 
                        string Machine_ID, 
                        string PCName, 
                        decimal ParameterProcessTime, 
                        decimal ChuckDrivePositionCountActual, 
                        decimal ChuckTempControlDCBiasActVoltage, 
                        decimal ChuckTempControlSensor, 
                        decimal CurrentStepNumber, 
                        decimal DCActualCurrent, 
                        decimal DCActualPower, 
                        decimal DCActualVoltage, 
                        decimal DCHardArcPerRun, 
                        decimal DCMicroArcPerRun, 
                        decimal DCPowerCorrection, 
                        decimal DCShieldLifeCounter, 
                        decimal DCTargetLifeCounter, 
                        decimal FlexiCathMagnetPositionSensor, 
                        decimal GasVacuumSystemGas1Sensor, 
                        decimal GasVacuumSystemGas3Sensor, 
                        decimal GasVacuumSystemPressureReaderManagerPressure, 
                        decimal GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                        decimal MatchingSeriesCapacitorPositionSensor, 
                        decimal MatchingShuntCapacitorPositionSensor, 
                        decimal ProcessTimerTimeCorrection, 
                        decimal RFBiasDCVoltageSensor, 
                        decimal RFBiasLoadPowerCorrection, 
                        decimal RFBiasLoadPowerSensor, 
                        decimal RFBiasReflectedPowerSensor, 
                        string WaferIDRead, 
                        decimal zzEvent) {
                SIO2_LogsRow rowSIO2_LogsRow = ((SIO2_LogsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ImportDate,
                        FileName,
                        Filetpye,
                        Processmodul,
                        Lotnumber,
                        Slotnumber,
                        ProcessID,
                        DateAndTime,
                        HeaderWaferID,
                        Recipe,
                        Machine_ID,
                        PCName,
                        ParameterProcessTime,
                        ChuckDrivePositionCountActual,
                        ChuckTempControlDCBiasActVoltage,
                        ChuckTempControlSensor,
                        CurrentStepNumber,
                        DCActualCurrent,
                        DCActualPower,
                        DCActualVoltage,
                        DCHardArcPerRun,
                        DCMicroArcPerRun,
                        DCPowerCorrection,
                        DCShieldLifeCounter,
                        DCTargetLifeCounter,
                        FlexiCathMagnetPositionSensor,
                        GasVacuumSystemGas1Sensor,
                        GasVacuumSystemGas3Sensor,
                        GasVacuumSystemPressureReaderManagerPressure,
                        GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor,
                        MatchingSeriesCapacitorPositionSensor,
                        MatchingShuntCapacitorPositionSensor,
                        ProcessTimerTimeCorrection,
                        RFBiasDCVoltageSensor,
                        RFBiasLoadPowerCorrection,
                        RFBiasLoadPowerSensor,
                        RFBiasReflectedPowerSensor,
                        WaferIDRead,
                        zzEvent};
                rowSIO2_LogsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSIO2_LogsRow);
                return rowSIO2_LogsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsRow FindByID(int ID) {
                return ((SIO2_LogsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SIO2_LogsDataTable cln = ((SIO2_LogsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SIO2_LogsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnImportDate = base.Columns["ImportDate"];
                this.columnFileName = base.Columns["FileName"];
                this.columnFiletpye = base.Columns["Filetpye"];
                this.columnProcessmodul = base.Columns["Processmodul"];
                this.columnLotnumber = base.Columns["Lotnumber"];
                this.columnSlotnumber = base.Columns["Slotnumber"];
                this.columnProcessID = base.Columns["ProcessID"];
                this.columnDateAndTime = base.Columns["DateAndTime"];
                this.columnHeaderWaferID = base.Columns["HeaderWaferID"];
                this.columnRecipe = base.Columns["Recipe"];
                this.columnMachine_ID = base.Columns["Machine_ID"];
                this.columnPCName = base.Columns["PCName"];
                this.columnParameterProcessTime = base.Columns["ParameterProcessTime"];
                this.columnChuckDrivePositionCountActual = base.Columns["ChuckDrivePositionCountActual"];
                this.columnChuckTempControlDCBiasActVoltage = base.Columns["ChuckTempControlDCBiasActVoltage"];
                this.columnChuckTempControlSensor = base.Columns["ChuckTempControlSensor"];
                this.columnCurrentStepNumber = base.Columns["CurrentStepNumber"];
                this.columnDCActualCurrent = base.Columns["DCActualCurrent"];
                this.columnDCActualPower = base.Columns["DCActualPower"];
                this.columnDCActualVoltage = base.Columns["DCActualVoltage"];
                this.columnDCHardArcPerRun = base.Columns["DCHardArcPerRun"];
                this.columnDCMicroArcPerRun = base.Columns["DCMicroArcPerRun"];
                this.columnDCPowerCorrection = base.Columns["DCPowerCorrection"];
                this.columnDCShieldLifeCounter = base.Columns["DCShieldLifeCounter"];
                this.columnDCTargetLifeCounter = base.Columns["DCTargetLifeCounter"];
                this.columnFlexiCathMagnetPositionSensor = base.Columns["FlexiCathMagnetPositionSensor"];
                this.columnGasVacuumSystemGas1Sensor = base.Columns["GasVacuumSystemGas1Sensor"];
                this.columnGasVacuumSystemGas3Sensor = base.Columns["GasVacuumSystemGas3Sensor"];
                this.columnGasVacuumSystemPressureReaderManagerPressure = base.Columns["GasVacuumSystemPressureReaderManagerPressure"];
                this.columnGasVacuumSystemPressureReaderManagerWiderangeGaugeSensor = base.Columns["GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor"];
                this.columnMatchingSeriesCapacitorPositionSensor = base.Columns["MatchingSeriesCapacitorPositionSensor"];
                this.columnMatchingShuntCapacitorPositionSensor = base.Columns["MatchingShuntCapacitorPositionSensor"];
                this.columnProcessTimerTimeCorrection = base.Columns["ProcessTimerTimeCorrection"];
                this.columnRFBiasDCVoltageSensor = base.Columns["RFBiasDCVoltageSensor"];
                this.columnRFBiasLoadPowerCorrection = base.Columns["RFBiasLoadPowerCorrection"];
                this.columnRFBiasLoadPowerSensor = base.Columns["RFBiasLoadPowerSensor"];
                this.columnRFBiasReflectedPowerSensor = base.Columns["RFBiasReflectedPowerSensor"];
                this.columnWaferIDRead = base.Columns["WaferIDRead"];
                this.columnzzEvent = base.Columns["zzEvent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnImportDate = new global::System.Data.DataColumn("ImportDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportDate);
                this.columnFileName = new global::System.Data.DataColumn("FileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnFiletpye = new global::System.Data.DataColumn("Filetpye", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFiletpye);
                this.columnProcessmodul = new global::System.Data.DataColumn("Processmodul", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessmodul);
                this.columnLotnumber = new global::System.Data.DataColumn("Lotnumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotnumber);
                this.columnSlotnumber = new global::System.Data.DataColumn("Slotnumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlotnumber);
                this.columnProcessID = new global::System.Data.DataColumn("ProcessID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessID);
                this.columnDateAndTime = new global::System.Data.DataColumn("DateAndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAndTime);
                this.columnHeaderWaferID = new global::System.Data.DataColumn("HeaderWaferID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderWaferID);
                this.columnRecipe = new global::System.Data.DataColumn("Recipe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecipe);
                this.columnMachine_ID = new global::System.Data.DataColumn("Machine_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachine_ID);
                this.columnPCName = new global::System.Data.DataColumn("PCName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPCName);
                this.columnParameterProcessTime = new global::System.Data.DataColumn("ParameterProcessTime", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParameterProcessTime);
                this.columnChuckDrivePositionCountActual = new global::System.Data.DataColumn("ChuckDrivePositionCountActual", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChuckDrivePositionCountActual);
                this.columnChuckTempControlDCBiasActVoltage = new global::System.Data.DataColumn("ChuckTempControlDCBiasActVoltage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChuckTempControlDCBiasActVoltage);
                this.columnChuckTempControlSensor = new global::System.Data.DataColumn("ChuckTempControlSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChuckTempControlSensor);
                this.columnCurrentStepNumber = new global::System.Data.DataColumn("CurrentStepNumber", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentStepNumber);
                this.columnDCActualCurrent = new global::System.Data.DataColumn("DCActualCurrent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCActualCurrent);
                this.columnDCActualPower = new global::System.Data.DataColumn("DCActualPower", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCActualPower);
                this.columnDCActualVoltage = new global::System.Data.DataColumn("DCActualVoltage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCActualVoltage);
                this.columnDCHardArcPerRun = new global::System.Data.DataColumn("DCHardArcPerRun", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCHardArcPerRun);
                this.columnDCMicroArcPerRun = new global::System.Data.DataColumn("DCMicroArcPerRun", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCMicroArcPerRun);
                this.columnDCPowerCorrection = new global::System.Data.DataColumn("DCPowerCorrection", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCPowerCorrection);
                this.columnDCShieldLifeCounter = new global::System.Data.DataColumn("DCShieldLifeCounter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCShieldLifeCounter);
                this.columnDCTargetLifeCounter = new global::System.Data.DataColumn("DCTargetLifeCounter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCTargetLifeCounter);
                this.columnFlexiCathMagnetPositionSensor = new global::System.Data.DataColumn("FlexiCathMagnetPositionSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlexiCathMagnetPositionSensor);
                this.columnGasVacuumSystemGas1Sensor = new global::System.Data.DataColumn("GasVacuumSystemGas1Sensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasVacuumSystemGas1Sensor);
                this.columnGasVacuumSystemGas3Sensor = new global::System.Data.DataColumn("GasVacuumSystemGas3Sensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasVacuumSystemGas3Sensor);
                this.columnGasVacuumSystemPressureReaderManagerPressure = new global::System.Data.DataColumn("GasVacuumSystemPressureReaderManagerPressure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasVacuumSystemPressureReaderManagerPressure);
                this.columnGasVacuumSystemPressureReaderManagerWiderangeGaugeSensor = new global::System.Data.DataColumn("GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasVacuumSystemPressureReaderManagerWiderangeGaugeSensor);
                this.columnMatchingSeriesCapacitorPositionSensor = new global::System.Data.DataColumn("MatchingSeriesCapacitorPositionSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMatchingSeriesCapacitorPositionSensor);
                this.columnMatchingShuntCapacitorPositionSensor = new global::System.Data.DataColumn("MatchingShuntCapacitorPositionSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMatchingShuntCapacitorPositionSensor);
                this.columnProcessTimerTimeCorrection = new global::System.Data.DataColumn("ProcessTimerTimeCorrection", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessTimerTimeCorrection);
                this.columnRFBiasDCVoltageSensor = new global::System.Data.DataColumn("RFBiasDCVoltageSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFBiasDCVoltageSensor);
                this.columnRFBiasLoadPowerCorrection = new global::System.Data.DataColumn("RFBiasLoadPowerCorrection", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFBiasLoadPowerCorrection);
                this.columnRFBiasLoadPowerSensor = new global::System.Data.DataColumn("RFBiasLoadPowerSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFBiasLoadPowerSensor);
                this.columnRFBiasReflectedPowerSensor = new global::System.Data.DataColumn("RFBiasReflectedPowerSensor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRFBiasReflectedPowerSensor);
                this.columnWaferIDRead = new global::System.Data.DataColumn("WaferIDRead", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaferIDRead);
                this.columnzzEvent = new global::System.Data.DataColumn("zzEvent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzzEvent);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnImportDate.AllowDBNull = false;
                this.columnFileName.AllowDBNull = false;
                this.columnFileName.MaxLength = 2147483647;
                this.columnFiletpye.AllowDBNull = false;
                this.columnFiletpye.MaxLength = 10;
                this.columnProcessmodul.AllowDBNull = false;
                this.columnProcessmodul.MaxLength = 10;
                this.columnLotnumber.AllowDBNull = false;
                this.columnLotnumber.MaxLength = 10;
                this.columnSlotnumber.AllowDBNull = false;
                this.columnSlotnumber.MaxLength = 2;
                this.columnProcessID.AllowDBNull = false;
                this.columnProcessID.MaxLength = 2;
                this.columnDateAndTime.AllowDBNull = false;
                this.columnHeaderWaferID.MaxLength = 15;
                this.columnRecipe.AllowDBNull = false;
                this.columnRecipe.MaxLength = 2147483647;
                this.columnMachine_ID.AllowDBNull = false;
                this.columnMachine_ID.MaxLength = 10;
                this.columnPCName.AllowDBNull = false;
                this.columnPCName.MaxLength = 20;
                this.columnParameterProcessTime.AllowDBNull = false;
                this.columnWaferIDRead.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsRow NewSIO2_LogsRow() {
                return ((SIO2_LogsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SIO2_LogsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SIO2_LogsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SIO2_LogsRowChanged != null)) {
                    this.SIO2_LogsRowChanged(this, new SIO2_LogsRowChangeEvent(((SIO2_LogsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SIO2_LogsRowChanging != null)) {
                    this.SIO2_LogsRowChanging(this, new SIO2_LogsRowChangeEvent(((SIO2_LogsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SIO2_LogsRowDeleted != null)) {
                    this.SIO2_LogsRowDeleted(this, new SIO2_LogsRowChangeEvent(((SIO2_LogsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SIO2_LogsRowDeleting != null)) {
                    this.SIO2_LogsRowDeleting(this, new SIO2_LogsRowChangeEvent(((SIO2_LogsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSIO2_LogsRow(SIO2_LogsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Machine_logDataSet ds = new Machine_logDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SIO2_LogsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SIO2_LogsRow : global::System.Data.DataRow {
            
            private SIO2_LogsDataTable tableSIO2_Logs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SIO2_LogsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSIO2_Logs = ((SIO2_LogsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID {
                get {
                    return ((int)(this[this.tableSIO2_Logs.IDColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ImportDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSIO2_Logs.ImportDateColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.ImportDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FileName {
                get {
                    return ((string)(this[this.tableSIO2_Logs.FileNameColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.FileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Filetpye {
                get {
                    return ((string)(this[this.tableSIO2_Logs.FiletpyeColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.FiletpyeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Processmodul {
                get {
                    return ((string)(this[this.tableSIO2_Logs.ProcessmodulColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.ProcessmodulColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Lotnumber {
                get {
                    return ((string)(this[this.tableSIO2_Logs.LotnumberColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.LotnumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Slotnumber {
                get {
                    return ((string)(this[this.tableSIO2_Logs.SlotnumberColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.SlotnumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ProcessID {
                get {
                    return ((string)(this[this.tableSIO2_Logs.ProcessIDColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.ProcessIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DateAndTime {
                get {
                    return ((global::System.DateTime)(this[this.tableSIO2_Logs.DateAndTimeColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.DateAndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HeaderWaferID {
                get {
                    try {
                        return ((string)(this[this.tableSIO2_Logs.HeaderWaferIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeaderWaferID\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.HeaderWaferIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Recipe {
                get {
                    return ((string)(this[this.tableSIO2_Logs.RecipeColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.RecipeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Machine_ID {
                get {
                    return ((string)(this[this.tableSIO2_Logs.Machine_IDColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.Machine_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PCName {
                get {
                    return ((string)(this[this.tableSIO2_Logs.PCNameColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.PCNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ParameterProcessTime {
                get {
                    return ((decimal)(this[this.tableSIO2_Logs.ParameterProcessTimeColumn]));
                }
                set {
                    this[this.tableSIO2_Logs.ParameterProcessTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ChuckDrivePositionCountActual {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.ChuckDrivePositionCountActualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChuckDrivePositionCountActual\' in table \'SIO2_Logs\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.ChuckDrivePositionCountActualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ChuckTempControlDCBiasActVoltage {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.ChuckTempControlDCBiasActVoltageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChuckTempControlDCBiasActVoltage\' in table \'SIO2_Logs\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.ChuckTempControlDCBiasActVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ChuckTempControlSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.ChuckTempControlSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChuckTempControlSensor\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.ChuckTempControlSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CurrentStepNumber {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.CurrentStepNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentStepNumber\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.CurrentStepNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCActualCurrent {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCActualCurrentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCActualCurrent\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCActualCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCActualPower {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCActualPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCActualPower\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCActualPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCActualVoltage {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCActualVoltageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCActualVoltage\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCActualVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCHardArcPerRun {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCHardArcPerRunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCHardArcPerRun\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCHardArcPerRunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCMicroArcPerRun {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCMicroArcPerRunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCMicroArcPerRun\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCMicroArcPerRunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCPowerCorrection {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCPowerCorrectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCPowerCorrection\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCPowerCorrectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCShieldLifeCounter {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCShieldLifeCounterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCShieldLifeCounter\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCShieldLifeCounterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DCTargetLifeCounter {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.DCTargetLifeCounterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCTargetLifeCounter\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.DCTargetLifeCounterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FlexiCathMagnetPositionSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.FlexiCathMagnetPositionSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlexiCathMagnetPositionSensor\' in table \'SIO2_Logs\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.FlexiCathMagnetPositionSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GasVacuumSystemGas1Sensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.GasVacuumSystemGas1SensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasVacuumSystemGas1Sensor\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.GasVacuumSystemGas1SensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GasVacuumSystemGas3Sensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.GasVacuumSystemGas3SensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasVacuumSystemGas3Sensor\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.GasVacuumSystemGas3SensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GasVacuumSystemPressureReaderManagerPressure {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerPressureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasVacuumSystemPressureReaderManagerPressure\' in table \'SIO" +
                                "2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerPressureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerWiderangeGaugeSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor\' i" +
                                "n table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerWiderangeGaugeSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MatchingSeriesCapacitorPositionSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.MatchingSeriesCapacitorPositionSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MatchingSeriesCapacitorPositionSensor\' in table \'SIO2_Logs\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.MatchingSeriesCapacitorPositionSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MatchingShuntCapacitorPositionSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.MatchingShuntCapacitorPositionSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MatchingShuntCapacitorPositionSensor\' in table \'SIO2_Logs\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.MatchingShuntCapacitorPositionSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ProcessTimerTimeCorrection {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.ProcessTimerTimeCorrectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessTimerTimeCorrection\' in table \'SIO2_Logs\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.ProcessTimerTimeCorrectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RFBiasDCVoltageSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.RFBiasDCVoltageSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFBiasDCVoltageSensor\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.RFBiasDCVoltageSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RFBiasLoadPowerCorrection {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.RFBiasLoadPowerCorrectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFBiasLoadPowerCorrection\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.RFBiasLoadPowerCorrectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RFBiasLoadPowerSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.RFBiasLoadPowerSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFBiasLoadPowerSensor\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.RFBiasLoadPowerSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RFBiasReflectedPowerSensor {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.RFBiasReflectedPowerSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RFBiasReflectedPowerSensor\' in table \'SIO2_Logs\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.RFBiasReflectedPowerSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WaferIDRead {
                get {
                    try {
                        return ((string)(this[this.tableSIO2_Logs.WaferIDReadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaferIDRead\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.WaferIDReadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal zzEvent {
                get {
                    try {
                        return ((decimal)(this[this.tableSIO2_Logs.zzEventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zzEvent\' in table \'SIO2_Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSIO2_Logs.zzEventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHeaderWaferIDNull() {
                return this.IsNull(this.tableSIO2_Logs.HeaderWaferIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHeaderWaferIDNull() {
                this[this.tableSIO2_Logs.HeaderWaferIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsChuckDrivePositionCountActualNull() {
                return this.IsNull(this.tableSIO2_Logs.ChuckDrivePositionCountActualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetChuckDrivePositionCountActualNull() {
                this[this.tableSIO2_Logs.ChuckDrivePositionCountActualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsChuckTempControlDCBiasActVoltageNull() {
                return this.IsNull(this.tableSIO2_Logs.ChuckTempControlDCBiasActVoltageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetChuckTempControlDCBiasActVoltageNull() {
                this[this.tableSIO2_Logs.ChuckTempControlDCBiasActVoltageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsChuckTempControlSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.ChuckTempControlSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetChuckTempControlSensorNull() {
                this[this.tableSIO2_Logs.ChuckTempControlSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentStepNumberNull() {
                return this.IsNull(this.tableSIO2_Logs.CurrentStepNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentStepNumberNull() {
                this[this.tableSIO2_Logs.CurrentStepNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCActualCurrentNull() {
                return this.IsNull(this.tableSIO2_Logs.DCActualCurrentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCActualCurrentNull() {
                this[this.tableSIO2_Logs.DCActualCurrentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCActualPowerNull() {
                return this.IsNull(this.tableSIO2_Logs.DCActualPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCActualPowerNull() {
                this[this.tableSIO2_Logs.DCActualPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCActualVoltageNull() {
                return this.IsNull(this.tableSIO2_Logs.DCActualVoltageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCActualVoltageNull() {
                this[this.tableSIO2_Logs.DCActualVoltageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCHardArcPerRunNull() {
                return this.IsNull(this.tableSIO2_Logs.DCHardArcPerRunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCHardArcPerRunNull() {
                this[this.tableSIO2_Logs.DCHardArcPerRunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCMicroArcPerRunNull() {
                return this.IsNull(this.tableSIO2_Logs.DCMicroArcPerRunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCMicroArcPerRunNull() {
                this[this.tableSIO2_Logs.DCMicroArcPerRunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCPowerCorrectionNull() {
                return this.IsNull(this.tableSIO2_Logs.DCPowerCorrectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCPowerCorrectionNull() {
                this[this.tableSIO2_Logs.DCPowerCorrectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCShieldLifeCounterNull() {
                return this.IsNull(this.tableSIO2_Logs.DCShieldLifeCounterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCShieldLifeCounterNull() {
                this[this.tableSIO2_Logs.DCShieldLifeCounterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCTargetLifeCounterNull() {
                return this.IsNull(this.tableSIO2_Logs.DCTargetLifeCounterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCTargetLifeCounterNull() {
                this[this.tableSIO2_Logs.DCTargetLifeCounterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFlexiCathMagnetPositionSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.FlexiCathMagnetPositionSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFlexiCathMagnetPositionSensorNull() {
                this[this.tableSIO2_Logs.FlexiCathMagnetPositionSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGasVacuumSystemGas1SensorNull() {
                return this.IsNull(this.tableSIO2_Logs.GasVacuumSystemGas1SensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGasVacuumSystemGas1SensorNull() {
                this[this.tableSIO2_Logs.GasVacuumSystemGas1SensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGasVacuumSystemGas3SensorNull() {
                return this.IsNull(this.tableSIO2_Logs.GasVacuumSystemGas3SensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGasVacuumSystemGas3SensorNull() {
                this[this.tableSIO2_Logs.GasVacuumSystemGas3SensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGasVacuumSystemPressureReaderManagerPressureNull() {
                return this.IsNull(this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerPressureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGasVacuumSystemPressureReaderManagerPressureNull() {
                this[this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerPressureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGasVacuumSystemPressureReaderManagerWiderangeGaugeSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerWiderangeGaugeSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGasVacuumSystemPressureReaderManagerWiderangeGaugeSensorNull() {
                this[this.tableSIO2_Logs.GasVacuumSystemPressureReaderManagerWiderangeGaugeSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMatchingSeriesCapacitorPositionSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.MatchingSeriesCapacitorPositionSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMatchingSeriesCapacitorPositionSensorNull() {
                this[this.tableSIO2_Logs.MatchingSeriesCapacitorPositionSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMatchingShuntCapacitorPositionSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.MatchingShuntCapacitorPositionSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMatchingShuntCapacitorPositionSensorNull() {
                this[this.tableSIO2_Logs.MatchingShuntCapacitorPositionSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProcessTimerTimeCorrectionNull() {
                return this.IsNull(this.tableSIO2_Logs.ProcessTimerTimeCorrectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProcessTimerTimeCorrectionNull() {
                this[this.tableSIO2_Logs.ProcessTimerTimeCorrectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRFBiasDCVoltageSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.RFBiasDCVoltageSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRFBiasDCVoltageSensorNull() {
                this[this.tableSIO2_Logs.RFBiasDCVoltageSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRFBiasLoadPowerCorrectionNull() {
                return this.IsNull(this.tableSIO2_Logs.RFBiasLoadPowerCorrectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRFBiasLoadPowerCorrectionNull() {
                this[this.tableSIO2_Logs.RFBiasLoadPowerCorrectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRFBiasLoadPowerSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.RFBiasLoadPowerSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRFBiasLoadPowerSensorNull() {
                this[this.tableSIO2_Logs.RFBiasLoadPowerSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRFBiasReflectedPowerSensorNull() {
                return this.IsNull(this.tableSIO2_Logs.RFBiasReflectedPowerSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRFBiasReflectedPowerSensorNull() {
                this[this.tableSIO2_Logs.RFBiasReflectedPowerSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWaferIDReadNull() {
                return this.IsNull(this.tableSIO2_Logs.WaferIDReadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWaferIDReadNull() {
                this[this.tableSIO2_Logs.WaferIDReadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IszzEventNull() {
                return this.IsNull(this.tableSIO2_Logs.zzEventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetzzEventNull() {
                this[this.tableSIO2_Logs.zzEventColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SIO2_LogsRowChangeEvent : global::System.EventArgs {
            
            private SIO2_LogsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsRowChangeEvent(SIO2_LogsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SIO2_LogsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DataImporter.Machine_logDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SIO2_LogsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SIO2_LogsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SIO2_Logs";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ImportDate", "ImportDate");
            tableMapping.ColumnMappings.Add("FileName", "FileName");
            tableMapping.ColumnMappings.Add("Filetpye", "Filetpye");
            tableMapping.ColumnMappings.Add("Processmodul", "Processmodul");
            tableMapping.ColumnMappings.Add("Lotnumber", "Lotnumber");
            tableMapping.ColumnMappings.Add("Slotnumber", "Slotnumber");
            tableMapping.ColumnMappings.Add("ProcessID", "ProcessID");
            tableMapping.ColumnMappings.Add("DateAndTime", "DateAndTime");
            tableMapping.ColumnMappings.Add("HeaderWaferID", "HeaderWaferID");
            tableMapping.ColumnMappings.Add("Recipe", "Recipe");
            tableMapping.ColumnMappings.Add("Machine_ID", "Machine_ID");
            tableMapping.ColumnMappings.Add("PCName", "PCName");
            tableMapping.ColumnMappings.Add("ParameterProcessTime", "ParameterProcessTime");
            tableMapping.ColumnMappings.Add("ChuckDrivePositionCountActual", "ChuckDrivePositionCountActual");
            tableMapping.ColumnMappings.Add("ChuckTempControlDCBiasActVoltage", "ChuckTempControlDCBiasActVoltage");
            tableMapping.ColumnMappings.Add("ChuckTempControlSensor", "ChuckTempControlSensor");
            tableMapping.ColumnMappings.Add("CurrentStepNumber", "CurrentStepNumber");
            tableMapping.ColumnMappings.Add("DCActualCurrent", "DCActualCurrent");
            tableMapping.ColumnMappings.Add("DCActualPower", "DCActualPower");
            tableMapping.ColumnMappings.Add("DCActualVoltage", "DCActualVoltage");
            tableMapping.ColumnMappings.Add("DCHardArcPerRun", "DCHardArcPerRun");
            tableMapping.ColumnMappings.Add("DCMicroArcPerRun", "DCMicroArcPerRun");
            tableMapping.ColumnMappings.Add("DCPowerCorrection", "DCPowerCorrection");
            tableMapping.ColumnMappings.Add("DCShieldLifeCounter", "DCShieldLifeCounter");
            tableMapping.ColumnMappings.Add("DCTargetLifeCounter", "DCTargetLifeCounter");
            tableMapping.ColumnMappings.Add("FlexiCathMagnetPositionSensor", "FlexiCathMagnetPositionSensor");
            tableMapping.ColumnMappings.Add("GasVacuumSystemGas1Sensor", "GasVacuumSystemGas1Sensor");
            tableMapping.ColumnMappings.Add("GasVacuumSystemGas3Sensor", "GasVacuumSystemGas3Sensor");
            tableMapping.ColumnMappings.Add("GasVacuumSystemPressureReaderManagerPressure", "GasVacuumSystemPressureReaderManagerPressure");
            tableMapping.ColumnMappings.Add("GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor");
            tableMapping.ColumnMappings.Add("MatchingSeriesCapacitorPositionSensor", "MatchingSeriesCapacitorPositionSensor");
            tableMapping.ColumnMappings.Add("MatchingShuntCapacitorPositionSensor", "MatchingShuntCapacitorPositionSensor");
            tableMapping.ColumnMappings.Add("ProcessTimerTimeCorrection", "ProcessTimerTimeCorrection");
            tableMapping.ColumnMappings.Add("RFBiasDCVoltageSensor", "RFBiasDCVoltageSensor");
            tableMapping.ColumnMappings.Add("RFBiasLoadPowerCorrection", "RFBiasLoadPowerCorrection");
            tableMapping.ColumnMappings.Add("RFBiasLoadPowerSensor", "RFBiasLoadPowerSensor");
            tableMapping.ColumnMappings.Add("RFBiasReflectedPowerSensor", "RFBiasReflectedPowerSensor");
            tableMapping.ColumnMappings.Add("WaferIDRead", "WaferIDRead");
            tableMapping.ColumnMappings.Add("zzEvent", "zzEvent");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [sputtern].[SIO2_Logs] WHERE (([ID] = @Original_ID) AND ([ImportDate]" +
                " = @Original_ImportDate) AND ([Filetpye] = @Original_Filetpye) AND ([Processmodu" +
                "l] = @Original_Processmodul) AND ([Lotnumber] = @Original_Lotnumber) AND ([Slotn" +
                "umber] = @Original_Slotnumber) AND ([ProcessID] = @Original_ProcessID) AND ([Dat" +
                "eAndTime] = @Original_DateAndTime) AND ((@IsNull_HeaderWaferID = 1 AND [HeaderWa" +
                "ferID] IS NULL) OR ([HeaderWaferID] = @Original_HeaderWaferID)) AND ([Machine_ID" +
                "] = @Original_Machine_ID) AND ([PCName] = @Original_PCName) AND ([ParameterProce" +
                "ssTime] = @Original_ParameterProcessTime) AND ((@IsNull_ChuckDrivePositionCountA" +
                "ctual = 1 AND [ChuckDrivePositionCountActual] IS NULL) OR ([ChuckDrivePositionCo" +
                "untActual] = @Original_ChuckDrivePositionCountActual)) AND ((@IsNull_ChuckTempCo" +
                "ntrolDCBiasActVoltage = 1 AND [ChuckTempControlDCBiasActVoltage] IS NULL) OR ([C" +
                "huckTempControlDCBiasActVoltage] = @Original_ChuckTempControlDCBiasActVoltage)) " +
                "AND ((@IsNull_ChuckTempControlSensor = 1 AND [ChuckTempControlSensor] IS NULL) O" +
                "R ([ChuckTempControlSensor] = @Original_ChuckTempControlSensor)) AND ((@IsNull_C" +
                "urrentStepNumber = 1 AND [CurrentStepNumber] IS NULL) OR ([CurrentStepNumber] = " +
                "@Original_CurrentStepNumber)) AND ((@IsNull_DCActualCurrent = 1 AND [DCActualCur" +
                "rent] IS NULL) OR ([DCActualCurrent] = @Original_DCActualCurrent)) AND ((@IsNull" +
                "_DCActualPower = 1 AND [DCActualPower] IS NULL) OR ([DCActualPower] = @Original_" +
                "DCActualPower)) AND ((@IsNull_DCActualVoltage = 1 AND [DCActualVoltage] IS NULL)" +
                " OR ([DCActualVoltage] = @Original_DCActualVoltage)) AND ((@IsNull_DCHardArcPerR" +
                "un = 1 AND [DCHardArcPerRun] IS NULL) OR ([DCHardArcPerRun] = @Original_DCHardAr" +
                "cPerRun)) AND ((@IsNull_DCMicroArcPerRun = 1 AND [DCMicroArcPerRun] IS NULL) OR " +
                "([DCMicroArcPerRun] = @Original_DCMicroArcPerRun)) AND ((@IsNull_DCPowerCorrecti" +
                "on = 1 AND [DCPowerCorrection] IS NULL) OR ([DCPowerCorrection] = @Original_DCPo" +
                "werCorrection)) AND ((@IsNull_DCShieldLifeCounter = 1 AND [DCShieldLifeCounter] " +
                "IS NULL) OR ([DCShieldLifeCounter] = @Original_DCShieldLifeCounter)) AND ((@IsNu" +
                "ll_DCTargetLifeCounter = 1 AND [DCTargetLifeCounter] IS NULL) OR ([DCTargetLifeC" +
                "ounter] = @Original_DCTargetLifeCounter)) AND ((@IsNull_FlexiCathMagnetPositionS" +
                "ensor = 1 AND [FlexiCathMagnetPositionSensor] IS NULL) OR ([FlexiCathMagnetPosit" +
                "ionSensor] = @Original_FlexiCathMagnetPositionSensor)) AND ((@IsNull_GasVacuumSy" +
                "stemGas1Sensor = 1 AND [GasVacuumSystemGas1Sensor] IS NULL) OR ([GasVacuumSystem" +
                "Gas1Sensor] = @Original_GasVacuumSystemGas1Sensor)) AND ((@IsNull_GasVacuumSyste" +
                "mGas3Sensor = 1 AND [GasVacuumSystemGas3Sensor] IS NULL) OR ([GasVacuumSystemGas" +
                "3Sensor] = @Original_GasVacuumSystemGas3Sensor)) AND ((@IsNull_GasVacuumSystemPr" +
                "essureReaderManagerPressure = 1 AND [GasVacuumSystemPressureReaderManagerPressur" +
                "e] IS NULL) OR ([GasVacuumSystemPressureReaderManagerPressure] = @Original_GasVa" +
                "cuumSystemPressureReaderManagerPressure)) AND ((@IsNull_GasVacuumSystemPressureR" +
                "eaderManagerWiderangeGaugeSensor = 1 AND [GasVacuumSystemPressureReaderManagerWi" +
                "derangeGaugeSensor] IS NULL) OR ([GasVacuumSystemPressureReaderManagerWiderangeG" +
                "augeSensor] = @Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor" +
                ")) AND ((@IsNull_MatchingSeriesCapacitorPositionSensor = 1 AND [MatchingSeriesCa" +
                "pacitorPositionSensor] IS NULL) OR ([MatchingSeriesCapacitorPositionSensor] = @O" +
                "riginal_MatchingSeriesCapacitorPositionSensor)) AND ((@IsNull_MatchingShuntCapac" +
                "itorPositionSensor = 1 AND [MatchingShuntCapacitorPositionSensor] IS NULL) OR ([" +
                "MatchingShuntCapacitorPositionSensor] = @Original_MatchingShuntCapacitorPosition" +
                "Sensor)) AND ((@IsNull_ProcessTimerTimeCorrection = 1 AND [ProcessTimerTimeCorre" +
                "ction] IS NULL) OR ([ProcessTimerTimeCorrection] = @Original_ProcessTimerTimeCor" +
                "rection)) AND ((@IsNull_RFBiasDCVoltageSensor = 1 AND [RFBiasDCVoltageSensor] IS" +
                " NULL) OR ([RFBiasDCVoltageSensor] = @Original_RFBiasDCVoltageSensor)) AND ((@Is" +
                "Null_RFBiasLoadPowerCorrection = 1 AND [RFBiasLoadPowerCorrection] IS NULL) OR (" +
                "[RFBiasLoadPowerCorrection] = @Original_RFBiasLoadPowerCorrection)) AND ((@IsNul" +
                "l_RFBiasLoadPowerSensor = 1 AND [RFBiasLoadPowerSensor] IS NULL) OR ([RFBiasLoad" +
                "PowerSensor] = @Original_RFBiasLoadPowerSensor)) AND ((@IsNull_RFBiasReflectedPo" +
                "werSensor = 1 AND [RFBiasReflectedPowerSensor] IS NULL) OR ([RFBiasReflectedPowe" +
                "rSensor] = @Original_RFBiasReflectedPowerSensor)) AND ((@IsNull_WaferIDRead = 1 " +
                "AND [WaferIDRead] IS NULL) OR ([WaferIDRead] = @Original_WaferIDRead)) AND ((@Is" +
                "Null_zzEvent = 1 AND [zzEvent] IS NULL) OR ([zzEvent] = @Original_zzEvent)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImportDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Filetpye", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Filetpye", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Processmodul", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Processmodul", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Lotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lotnumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Slotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Slotnumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateAndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HeaderWaferID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeaderWaferID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeaderWaferID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeaderWaferID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Machine_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Machine_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PCName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PCName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParameterProcessTime", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ParameterProcessTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChuckDrivePositionCountActual", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChuckDrivePositionCountActual", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChuckDrivePositionCountActual", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckDrivePositionCountActual", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChuckTempControlDCBiasActVoltage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChuckTempControlDCBiasActVoltage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChuckTempControlDCBiasActVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlDCBiasActVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChuckTempControlSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChuckTempControlSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChuckTempControlSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CurrentStepNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentStepNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CurrentStepNumber", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "CurrentStepNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCActualCurrent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCActualCurrent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCActualCurrent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualCurrent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCActualPower", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCActualPower", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCActualPower", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualPower", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCActualVoltage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCActualVoltage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCActualVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCHardArcPerRun", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCHardArcPerRun", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCHardArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCHardArcPerRun", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCMicroArcPerRun", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCMicroArcPerRun", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCMicroArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCMicroArcPerRun", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCPowerCorrection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCPowerCorrection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCPowerCorrection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCShieldLifeCounter", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCShieldLifeCounter", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCShieldLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCShieldLifeCounter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCTargetLifeCounter", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCTargetLifeCounter", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCTargetLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCTargetLifeCounter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FlexiCathMagnetPositionSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlexiCathMagnetPositionSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlexiCathMagnetPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "FlexiCathMagnetPositionSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemGas1Sensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemGas1Sensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemGas1Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas1Sensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemGas3Sensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemGas3Sensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemGas3Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas3Sensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemPressureReaderManagerPressure", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemPressureReaderManagerPressure", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemPressureReaderManagerPressure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerPressure", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MatchingSeriesCapacitorPositionSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchingSeriesCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MatchingSeriesCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingSeriesCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MatchingShuntCapacitorPositionSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchingShuntCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MatchingShuntCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingShuntCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessTimerTimeCorrection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTimerTimeCorrection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessTimerTimeCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ProcessTimerTimeCorrection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasDCVoltageSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasDCVoltageSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasDCVoltageSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasDCVoltageSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasLoadPowerCorrection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasLoadPowerCorrection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasLoadPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerCorrection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasLoadPowerSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasLoadPowerSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasLoadPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasReflectedPowerSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasReflectedPowerSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasReflectedPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasReflectedPowerSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WaferIDRead", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferIDRead", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WaferIDRead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferIDRead", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_zzEvent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "zzEvent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_zzEvent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "zzEvent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [sputtern].[SIO2_Logs] ([ImportDate], [FileName], [Filetpye], [Proces" +
                "smodul], [Lotnumber], [Slotnumber], [ProcessID], [DateAndTime], [HeaderWaferID]," +
                " [Recipe], [Machine_ID], [PCName], [ParameterProcessTime], [ChuckDrivePositionCo" +
                "untActual], [ChuckTempControlDCBiasActVoltage], [ChuckTempControlSensor], [Curre" +
                "ntStepNumber], [DCActualCurrent], [DCActualPower], [DCActualVoltage], [DCHardArc" +
                "PerRun], [DCMicroArcPerRun], [DCPowerCorrection], [DCShieldLifeCounter], [DCTarg" +
                "etLifeCounter], [FlexiCathMagnetPositionSensor], [GasVacuumSystemGas1Sensor], [G" +
                "asVacuumSystemGas3Sensor], [GasVacuumSystemPressureReaderManagerPressure], [GasV" +
                "acuumSystemPressureReaderManagerWiderangeGaugeSensor], [MatchingSeriesCapacitorP" +
                "ositionSensor], [MatchingShuntCapacitorPositionSensor], [ProcessTimerTimeCorrect" +
                "ion], [RFBiasDCVoltageSensor], [RFBiasLoadPowerCorrection], [RFBiasLoadPowerSens" +
                "or], [RFBiasReflectedPowerSensor], [WaferIDRead], [zzEvent]) VALUES (@ImportDate" +
                ", @FileName, @Filetpye, @Processmodul, @Lotnumber, @Slotnumber, @ProcessID, @Dat" +
                "eAndTime, @HeaderWaferID, @Recipe, @Machine_ID, @PCName, @ParameterProcessTime, " +
                "@ChuckDrivePositionCountActual, @ChuckTempControlDCBiasActVoltage, @ChuckTempCon" +
                "trolSensor, @CurrentStepNumber, @DCActualCurrent, @DCActualPower, @DCActualVolta" +
                "ge, @DCHardArcPerRun, @DCMicroArcPerRun, @DCPowerCorrection, @DCShieldLifeCounte" +
                "r, @DCTargetLifeCounter, @FlexiCathMagnetPositionSensor, @GasVacuumSystemGas1Sen" +
                "sor, @GasVacuumSystemGas3Sensor, @GasVacuumSystemPressureReaderManagerPressure, " +
                "@GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, @MatchingSeriesCapaci" +
                "torPositionSensor, @MatchingShuntCapacitorPositionSensor, @ProcessTimerTimeCorre" +
                "ction, @RFBiasDCVoltageSensor, @RFBiasLoadPowerCorrection, @RFBiasLoadPowerSenso" +
                "r, @RFBiasReflectedPowerSensor, @WaferIDRead, @zzEvent);\r\nSELECT ID, ImportDate," +
                " FileName, Filetpye, Processmodul, Lotnumber, Slotnumber, ProcessID, DateAndTime" +
                ", HeaderWaferID, Recipe, Machine_ID, PCName, ParameterProcessTime, ChuckDrivePos" +
                "itionCountActual, ChuckTempControlDCBiasActVoltage, ChuckTempControlSensor, Curr" +
                "entStepNumber, DCActualCurrent, DCActualPower, DCActualVoltage, DCHardArcPerRun," +
                " DCMicroArcPerRun, DCPowerCorrection, DCShieldLifeCounter, DCTargetLifeCounter, " +
                "FlexiCathMagnetPositionSensor, GasVacuumSystemGas1Sensor, GasVacuumSystemGas3Sen" +
                "sor, GasVacuumSystemPressureReaderManagerPressure, GasVacuumSystemPressureReader" +
                "ManagerWiderangeGaugeSensor, MatchingSeriesCapacitorPositionSensor, MatchingShun" +
                "tCapacitorPositionSensor, ProcessTimerTimeCorrection, RFBiasDCVoltageSensor, RFB" +
                "iasLoadPowerCorrection, RFBiasLoadPowerSensor, RFBiasReflectedPowerSensor, Wafer" +
                "IDRead, zzEvent FROM sputtern.SIO2_Logs WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Filetpye", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Filetpye", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Processmodul", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Processmodul", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lotnumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Slotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Slotnumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateAndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeaderWaferID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeaderWaferID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Recipe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Recipe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Machine_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Machine_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PCName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PCName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParameterProcessTime", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ParameterProcessTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChuckDrivePositionCountActual", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckDrivePositionCountActual", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChuckTempControlDCBiasActVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlDCBiasActVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChuckTempControlSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentStepNumber", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "CurrentStepNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCActualCurrent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualCurrent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCActualPower", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualPower", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCActualVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCHardArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCHardArcPerRun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCMicroArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCMicroArcPerRun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCPowerCorrection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCShieldLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCShieldLifeCounter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCTargetLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCTargetLifeCounter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlexiCathMagnetPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "FlexiCathMagnetPositionSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemGas1Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas1Sensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemGas3Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas3Sensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemPressureReaderManagerPressure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerPressure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MatchingSeriesCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingSeriesCapacitorPositionSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MatchingShuntCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingShuntCapacitorPositionSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessTimerTimeCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ProcessTimerTimeCorrection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasDCVoltageSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasDCVoltageSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasLoadPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerCorrection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasLoadPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasReflectedPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasReflectedPowerSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WaferIDRead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferIDRead", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@zzEvent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "zzEvent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [sputtern].[SIO2_Logs] SET [ImportDate] = @ImportDate, [FileName] = @FileN" +
                "ame, [Filetpye] = @Filetpye, [Processmodul] = @Processmodul, [Lotnumber] = @Lotn" +
                "umber, [Slotnumber] = @Slotnumber, [ProcessID] = @ProcessID, [DateAndTime] = @Da" +
                "teAndTime, [HeaderWaferID] = @HeaderWaferID, [Recipe] = @Recipe, [Machine_ID] = " +
                "@Machine_ID, [PCName] = @PCName, [ParameterProcessTime] = @ParameterProcessTime," +
                " [ChuckDrivePositionCountActual] = @ChuckDrivePositionCountActual, [ChuckTempCon" +
                "trolDCBiasActVoltage] = @ChuckTempControlDCBiasActVoltage, [ChuckTempControlSens" +
                "or] = @ChuckTempControlSensor, [CurrentStepNumber] = @CurrentStepNumber, [DCActu" +
                "alCurrent] = @DCActualCurrent, [DCActualPower] = @DCActualPower, [DCActualVoltag" +
                "e] = @DCActualVoltage, [DCHardArcPerRun] = @DCHardArcPerRun, [DCMicroArcPerRun] " +
                "= @DCMicroArcPerRun, [DCPowerCorrection] = @DCPowerCorrection, [DCShieldLifeCoun" +
                "ter] = @DCShieldLifeCounter, [DCTargetLifeCounter] = @DCTargetLifeCounter, [Flex" +
                "iCathMagnetPositionSensor] = @FlexiCathMagnetPositionSensor, [GasVacuumSystemGas" +
                "1Sensor] = @GasVacuumSystemGas1Sensor, [GasVacuumSystemGas3Sensor] = @GasVacuumS" +
                "ystemGas3Sensor, [GasVacuumSystemPressureReaderManagerPressure] = @GasVacuumSyst" +
                "emPressureReaderManagerPressure, [GasVacuumSystemPressureReaderManagerWiderangeG" +
                "augeSensor] = @GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, [Matchi" +
                "ngSeriesCapacitorPositionSensor] = @MatchingSeriesCapacitorPositionSensor, [Matc" +
                "hingShuntCapacitorPositionSensor] = @MatchingShuntCapacitorPositionSensor, [Proc" +
                "essTimerTimeCorrection] = @ProcessTimerTimeCorrection, [RFBiasDCVoltageSensor] =" +
                " @RFBiasDCVoltageSensor, [RFBiasLoadPowerCorrection] = @RFBiasLoadPowerCorrectio" +
                "n, [RFBiasLoadPowerSensor] = @RFBiasLoadPowerSensor, [RFBiasReflectedPowerSensor" +
                "] = @RFBiasReflectedPowerSensor, [WaferIDRead] = @WaferIDRead, [zzEvent] = @zzEv" +
                "ent WHERE (([ID] = @Original_ID) AND ([ImportDate] = @Original_ImportDate) AND (" +
                "[Filetpye] = @Original_Filetpye) AND ([Processmodul] = @Original_Processmodul) A" +
                "ND ([Lotnumber] = @Original_Lotnumber) AND ([Slotnumber] = @Original_Slotnumber)" +
                " AND ([ProcessID] = @Original_ProcessID) AND ([DateAndTime] = @Original_DateAndT" +
                "ime) AND ((@IsNull_HeaderWaferID = 1 AND [HeaderWaferID] IS NULL) OR ([HeaderWaf" +
                "erID] = @Original_HeaderWaferID)) AND ([Machine_ID] = @Original_Machine_ID) AND " +
                "([PCName] = @Original_PCName) AND ([ParameterProcessTime] = @Original_ParameterP" +
                "rocessTime) AND ((@IsNull_ChuckDrivePositionCountActual = 1 AND [ChuckDrivePosit" +
                "ionCountActual] IS NULL) OR ([ChuckDrivePositionCountActual] = @Original_ChuckDr" +
                "ivePositionCountActual)) AND ((@IsNull_ChuckTempControlDCBiasActVoltage = 1 AND " +
                "[ChuckTempControlDCBiasActVoltage] IS NULL) OR ([ChuckTempControlDCBiasActVoltag" +
                "e] = @Original_ChuckTempControlDCBiasActVoltage)) AND ((@IsNull_ChuckTempControl" +
                "Sensor = 1 AND [ChuckTempControlSensor] IS NULL) OR ([ChuckTempControlSensor] = " +
                "@Original_ChuckTempControlSensor)) AND ((@IsNull_CurrentStepNumber = 1 AND [Curr" +
                "entStepNumber] IS NULL) OR ([CurrentStepNumber] = @Original_CurrentStepNumber)) " +
                "AND ((@IsNull_DCActualCurrent = 1 AND [DCActualCurrent] IS NULL) OR ([DCActualCu" +
                "rrent] = @Original_DCActualCurrent)) AND ((@IsNull_DCActualPower = 1 AND [DCActu" +
                "alPower] IS NULL) OR ([DCActualPower] = @Original_DCActualPower)) AND ((@IsNull_" +
                "DCActualVoltage = 1 AND [DCActualVoltage] IS NULL) OR ([DCActualVoltage] = @Orig" +
                "inal_DCActualVoltage)) AND ((@IsNull_DCHardArcPerRun = 1 AND [DCHardArcPerRun] I" +
                "S NULL) OR ([DCHardArcPerRun] = @Original_DCHardArcPerRun)) AND ((@IsNull_DCMicr" +
                "oArcPerRun = 1 AND [DCMicroArcPerRun] IS NULL) OR ([DCMicroArcPerRun] = @Origina" +
                "l_DCMicroArcPerRun)) AND ((@IsNull_DCPowerCorrection = 1 AND [DCPowerCorrection]" +
                " IS NULL) OR ([DCPowerCorrection] = @Original_DCPowerCorrection)) AND ((@IsNull_" +
                "DCShieldLifeCounter = 1 AND [DCShieldLifeCounter] IS NULL) OR ([DCShieldLifeCoun" +
                "ter] = @Original_DCShieldLifeCounter)) AND ((@IsNull_DCTargetLifeCounter = 1 AND" +
                " [DCTargetLifeCounter] IS NULL) OR ([DCTargetLifeCounter] = @Original_DCTargetLi" +
                "feCounter)) AND ((@IsNull_FlexiCathMagnetPositionSensor = 1 AND [FlexiCathMagnet" +
                "PositionSensor] IS NULL) OR ([FlexiCathMagnetPositionSensor] = @Original_FlexiCa" +
                "thMagnetPositionSensor)) AND ((@IsNull_GasVacuumSystemGas1Sensor = 1 AND [GasVac" +
                "uumSystemGas1Sensor] IS NULL) OR ([GasVacuumSystemGas1Sensor] = @Original_GasVac" +
                "uumSystemGas1Sensor)) AND ((@IsNull_GasVacuumSystemGas3Sensor = 1 AND [GasVacuum" +
                "SystemGas3Sensor] IS NULL) OR ([GasVacuumSystemGas3Sensor] = @Original_GasVacuum" +
                "SystemGas3Sensor)) AND ((@IsNull_GasVacuumSystemPressureReaderManagerPressure = " +
                "1 AND [GasVacuumSystemPressureReaderManagerPressure] IS NULL) OR ([GasVacuumSyst" +
                "emPressureReaderManagerPressure] = @Original_GasVacuumSystemPressureReaderManage" +
                "rPressure)) AND ((@IsNull_GasVacuumSystemPressureReaderManagerWiderangeGaugeSens" +
                "or = 1 AND [GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor] IS NULL) O" +
                "R ([GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor] = @Original_GasVac" +
                "uumSystemPressureReaderManagerWiderangeGaugeSensor)) AND ((@IsNull_MatchingSerie" +
                "sCapacitorPositionSensor = 1 AND [MatchingSeriesCapacitorPositionSensor] IS NULL" +
                ") OR ([MatchingSeriesCapacitorPositionSensor] = @Original_MatchingSeriesCapacito" +
                "rPositionSensor)) AND ((@IsNull_MatchingShuntCapacitorPositionSensor = 1 AND [Ma" +
                "tchingShuntCapacitorPositionSensor] IS NULL) OR ([MatchingShuntCapacitorPosition" +
                "Sensor] = @Original_MatchingShuntCapacitorPositionSensor)) AND ((@IsNull_Process" +
                "TimerTimeCorrection = 1 AND [ProcessTimerTimeCorrection] IS NULL) OR ([ProcessTi" +
                "merTimeCorrection] = @Original_ProcessTimerTimeCorrection)) AND ((@IsNull_RFBias" +
                "DCVoltageSensor = 1 AND [RFBiasDCVoltageSensor] IS NULL) OR ([RFBiasDCVoltageSen" +
                "sor] = @Original_RFBiasDCVoltageSensor)) AND ((@IsNull_RFBiasLoadPowerCorrection" +
                " = 1 AND [RFBiasLoadPowerCorrection] IS NULL) OR ([RFBiasLoadPowerCorrection] = " +
                "@Original_RFBiasLoadPowerCorrection)) AND ((@IsNull_RFBiasLoadPowerSensor = 1 AN" +
                "D [RFBiasLoadPowerSensor] IS NULL) OR ([RFBiasLoadPowerSensor] = @Original_RFBia" +
                "sLoadPowerSensor)) AND ((@IsNull_RFBiasReflectedPowerSensor = 1 AND [RFBiasRefle" +
                "ctedPowerSensor] IS NULL) OR ([RFBiasReflectedPowerSensor] = @Original_RFBiasRef" +
                "lectedPowerSensor)) AND ((@IsNull_WaferIDRead = 1 AND [WaferIDRead] IS NULL) OR " +
                "([WaferIDRead] = @Original_WaferIDRead)) AND ((@IsNull_zzEvent = 1 AND [zzEvent]" +
                " IS NULL) OR ([zzEvent] = @Original_zzEvent)));\r\nSELECT ID, ImportDate, FileName" +
                ", Filetpye, Processmodul, Lotnumber, Slotnumber, ProcessID, DateAndTime, HeaderW" +
                "aferID, Recipe, Machine_ID, PCName, ParameterProcessTime, ChuckDrivePositionCoun" +
                "tActual, ChuckTempControlDCBiasActVoltage, ChuckTempControlSensor, CurrentStepNu" +
                "mber, DCActualCurrent, DCActualPower, DCActualVoltage, DCHardArcPerRun, DCMicroA" +
                "rcPerRun, DCPowerCorrection, DCShieldLifeCounter, DCTargetLifeCounter, FlexiCath" +
                "MagnetPositionSensor, GasVacuumSystemGas1Sensor, GasVacuumSystemGas3Sensor, GasV" +
                "acuumSystemPressureReaderManagerPressure, GasVacuumSystemPressureReaderManagerWi" +
                "derangeGaugeSensor, MatchingSeriesCapacitorPositionSensor, MatchingShuntCapacito" +
                "rPositionSensor, ProcessTimerTimeCorrection, RFBiasDCVoltageSensor, RFBiasLoadPo" +
                "werCorrection, RFBiasLoadPowerSensor, RFBiasReflectedPowerSensor, WaferIDRead, z" +
                "zEvent FROM sputtern.SIO2_Logs WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Filetpye", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Filetpye", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Processmodul", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Processmodul", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lotnumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Slotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Slotnumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateAndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeaderWaferID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeaderWaferID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Recipe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Recipe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Machine_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Machine_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PCName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PCName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParameterProcessTime", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ParameterProcessTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChuckDrivePositionCountActual", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckDrivePositionCountActual", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChuckTempControlDCBiasActVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlDCBiasActVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChuckTempControlSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentStepNumber", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "CurrentStepNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCActualCurrent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualCurrent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCActualPower", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualPower", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCActualVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCHardArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCHardArcPerRun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCMicroArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCMicroArcPerRun", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCPowerCorrection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCShieldLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCShieldLifeCounter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DCTargetLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCTargetLifeCounter", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlexiCathMagnetPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "FlexiCathMagnetPositionSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemGas1Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas1Sensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemGas3Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas3Sensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemPressureReaderManagerPressure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerPressure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MatchingSeriesCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingSeriesCapacitorPositionSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MatchingShuntCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingShuntCapacitorPositionSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessTimerTimeCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ProcessTimerTimeCorrection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasDCVoltageSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasDCVoltageSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasLoadPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerCorrection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasLoadPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFBiasReflectedPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasReflectedPowerSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WaferIDRead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferIDRead", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@zzEvent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "zzEvent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImportDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImportDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Filetpye", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Filetpye", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Processmodul", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Processmodul", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Lotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lotnumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Slotnumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Slotnumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateAndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateAndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_HeaderWaferID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeaderWaferID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeaderWaferID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeaderWaferID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Machine_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Machine_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PCName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PCName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParameterProcessTime", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ParameterProcessTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChuckDrivePositionCountActual", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChuckDrivePositionCountActual", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChuckDrivePositionCountActual", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckDrivePositionCountActual", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChuckTempControlDCBiasActVoltage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChuckTempControlDCBiasActVoltage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChuckTempControlDCBiasActVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlDCBiasActVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChuckTempControlSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChuckTempControlSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChuckTempControlSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ChuckTempControlSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CurrentStepNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentStepNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CurrentStepNumber", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "CurrentStepNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCActualCurrent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCActualCurrent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCActualCurrent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualCurrent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCActualPower", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCActualPower", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCActualPower", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualPower", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCActualVoltage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCActualVoltage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCActualVoltage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCActualVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCHardArcPerRun", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCHardArcPerRun", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCHardArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCHardArcPerRun", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCMicroArcPerRun", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCMicroArcPerRun", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCMicroArcPerRun", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCMicroArcPerRun", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCPowerCorrection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCPowerCorrection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCPowerCorrection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCShieldLifeCounter", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCShieldLifeCounter", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCShieldLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCShieldLifeCounter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DCTargetLifeCounter", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DCTargetLifeCounter", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DCTargetLifeCounter", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "DCTargetLifeCounter", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FlexiCathMagnetPositionSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlexiCathMagnetPositionSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlexiCathMagnetPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "FlexiCathMagnetPositionSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemGas1Sensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemGas1Sensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemGas1Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas1Sensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemGas3Sensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemGas3Sensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemGas3Sensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemGas3Sensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemPressureReaderManagerPressure", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemPressureReaderManagerPressure", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemPressureReaderManagerPressure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerPressure", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MatchingSeriesCapacitorPositionSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchingSeriesCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MatchingSeriesCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingSeriesCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MatchingShuntCapacitorPositionSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MatchingShuntCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MatchingShuntCapacitorPositionSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "MatchingShuntCapacitorPositionSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessTimerTimeCorrection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTimerTimeCorrection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessTimerTimeCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "ProcessTimerTimeCorrection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasDCVoltageSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasDCVoltageSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasDCVoltageSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasDCVoltageSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasLoadPowerCorrection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasLoadPowerCorrection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasLoadPowerCorrection", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerCorrection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasLoadPowerSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasLoadPowerSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasLoadPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasLoadPowerSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RFBiasReflectedPowerSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFBiasReflectedPowerSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RFBiasReflectedPowerSensor", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "RFBiasReflectedPowerSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WaferIDRead", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferIDRead", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WaferIDRead", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WaferIDRead", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_zzEvent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "zzEvent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_zzEvent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "zzEvent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataImporter.Properties.Settings.Default.Machine_logConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, ImportDate, FileName, Filetpye, Processmodul, Lotnumber, Slotnumber, ProcessID, DateAndTime, HeaderWaferID, Recipe, Machine_ID, PCName, ParameterProcessTime, ChuckDrivePositionCountActual, ChuckTempControlDCBiasActVoltage, ChuckTempControlSensor, CurrentStepNumber, DCActualCurrent, DCActualPower, DCActualVoltage, DCHardArcPerRun, DCMicroArcPerRun, DCPowerCorrection, DCShieldLifeCounter, DCTargetLifeCounter, FlexiCathMagnetPositionSensor, GasVacuumSystemGas1Sensor, GasVacuumSystemGas3Sensor, GasVacuumSystemPressureReaderManagerPressure, GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, MatchingSeriesCapacitorPositionSensor, MatchingShuntCapacitorPositionSensor, ProcessTimerTimeCorrection, RFBiasDCVoltageSensor, RFBiasLoadPowerCorrection, RFBiasLoadPowerSensor, RFBiasReflectedPowerSensor, WaferIDRead, zzEvent FROM sputtern.SIO2_Logs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Machine_logDataSet.SIO2_LogsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Machine_logDataSet.SIO2_LogsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Machine_logDataSet.SIO2_LogsDataTable dataTable = new Machine_logDataSet.SIO2_LogsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Machine_logDataSet.SIO2_LogsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Machine_logDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SIO2_Logs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_ID, 
                    System.DateTime Original_ImportDate, 
                    string Original_Filetpye, 
                    string Original_Processmodul, 
                    string Original_Lotnumber, 
                    string Original_Slotnumber, 
                    string Original_ProcessID, 
                    System.DateTime Original_DateAndTime, 
                    string Original_HeaderWaferID, 
                    string Original_Machine_ID, 
                    string Original_PCName, 
                    decimal Original_ParameterProcessTime, 
                    global::System.Nullable<decimal> Original_ChuckDrivePositionCountActual, 
                    global::System.Nullable<decimal> Original_ChuckTempControlDCBiasActVoltage, 
                    global::System.Nullable<decimal> Original_ChuckTempControlSensor, 
                    global::System.Nullable<decimal> Original_CurrentStepNumber, 
                    global::System.Nullable<decimal> Original_DCActualCurrent, 
                    global::System.Nullable<decimal> Original_DCActualPower, 
                    global::System.Nullable<decimal> Original_DCActualVoltage, 
                    global::System.Nullable<decimal> Original_DCHardArcPerRun, 
                    global::System.Nullable<decimal> Original_DCMicroArcPerRun, 
                    global::System.Nullable<decimal> Original_DCPowerCorrection, 
                    global::System.Nullable<decimal> Original_DCShieldLifeCounter, 
                    global::System.Nullable<decimal> Original_DCTargetLifeCounter, 
                    global::System.Nullable<decimal> Original_FlexiCathMagnetPositionSensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemGas1Sensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemGas3Sensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemPressureReaderManagerPressure, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                    global::System.Nullable<decimal> Original_MatchingSeriesCapacitorPositionSensor, 
                    global::System.Nullable<decimal> Original_MatchingShuntCapacitorPositionSensor, 
                    global::System.Nullable<decimal> Original_ProcessTimerTimeCorrection, 
                    global::System.Nullable<decimal> Original_RFBiasDCVoltageSensor, 
                    global::System.Nullable<decimal> Original_RFBiasLoadPowerCorrection, 
                    global::System.Nullable<decimal> Original_RFBiasLoadPowerSensor, 
                    global::System.Nullable<decimal> Original_RFBiasReflectedPowerSensor, 
                    string Original_WaferIDRead, 
                    global::System.Nullable<decimal> Original_zzEvent) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_ImportDate));
            if ((Original_Filetpye == null)) {
                throw new global::System.ArgumentNullException("Original_Filetpye");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Filetpye));
            }
            if ((Original_Processmodul == null)) {
                throw new global::System.ArgumentNullException("Original_Processmodul");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Processmodul));
            }
            if ((Original_Lotnumber == null)) {
                throw new global::System.ArgumentNullException("Original_Lotnumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Lotnumber));
            }
            if ((Original_Slotnumber == null)) {
                throw new global::System.ArgumentNullException("Original_Slotnumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Slotnumber));
            }
            if ((Original_ProcessID == null)) {
                throw new global::System.ArgumentNullException("Original_ProcessID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ProcessID));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_DateAndTime));
            if ((Original_HeaderWaferID == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_HeaderWaferID));
            }
            if ((Original_Machine_ID == null)) {
                throw new global::System.ArgumentNullException("Original_Machine_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Machine_ID));
            }
            if ((Original_PCName == null)) {
                throw new global::System.ArgumentNullException("Original_PCName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_PCName));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_ParameterProcessTime));
            if ((Original_ChuckDrivePositionCountActual.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_ChuckDrivePositionCountActual.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ChuckTempControlDCBiasActVoltage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_ChuckTempControlDCBiasActVoltage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_ChuckTempControlSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((decimal)(Original_ChuckTempControlSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_CurrentStepNumber.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_CurrentStepNumber.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_DCActualCurrent.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_DCActualCurrent.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_DCActualPower.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_DCActualPower.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_DCActualVoltage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((decimal)(Original_DCActualVoltage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_DCHardArcPerRun.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((decimal)(Original_DCHardArcPerRun.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_DCMicroArcPerRun.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((decimal)(Original_DCMicroArcPerRun.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_DCPowerCorrection.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((decimal)(Original_DCPowerCorrection.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_DCShieldLifeCounter.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_DCShieldLifeCounter.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_DCTargetLifeCounter.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((decimal)(Original_DCTargetLifeCounter.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_FlexiCathMagnetPositionSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((decimal)(Original_FlexiCathMagnetPositionSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemGas1Sensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((decimal)(Original_GasVacuumSystemGas1Sensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemGas3Sensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((decimal)(Original_GasVacuumSystemGas3Sensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemPressureReaderManagerPressure.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((decimal)(Original_GasVacuumSystemPressureReaderManagerPressure.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((decimal)(Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_MatchingSeriesCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((decimal)(Original_MatchingSeriesCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_MatchingShuntCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((decimal)(Original_MatchingShuntCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_ProcessTimerTimeCorrection.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((decimal)(Original_ProcessTimerTimeCorrection.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasDCVoltageSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((decimal)(Original_RFBiasDCVoltageSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasLoadPowerCorrection.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((decimal)(Original_RFBiasLoadPowerCorrection.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasLoadPowerSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((decimal)(Original_RFBiasLoadPowerSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasReflectedPowerSensor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((decimal)(Original_RFBiasReflectedPowerSensor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_WaferIDRead == null)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_WaferIDRead));
            }
            if ((Original_zzEvent.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((decimal)(Original_zzEvent.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.DateTime ImportDate, 
                    string FileName, 
                    string Filetpye, 
                    string Processmodul, 
                    string Lotnumber, 
                    string Slotnumber, 
                    string ProcessID, 
                    System.DateTime DateAndTime, 
                    string HeaderWaferID, 
                    string Recipe, 
                    string Machine_ID, 
                    string PCName, 
                    decimal ParameterProcessTime, 
                    global::System.Nullable<decimal> ChuckDrivePositionCountActual, 
                    global::System.Nullable<decimal> ChuckTempControlDCBiasActVoltage, 
                    global::System.Nullable<decimal> ChuckTempControlSensor, 
                    global::System.Nullable<decimal> CurrentStepNumber, 
                    global::System.Nullable<decimal> DCActualCurrent, 
                    global::System.Nullable<decimal> DCActualPower, 
                    global::System.Nullable<decimal> DCActualVoltage, 
                    global::System.Nullable<decimal> DCHardArcPerRun, 
                    global::System.Nullable<decimal> DCMicroArcPerRun, 
                    global::System.Nullable<decimal> DCPowerCorrection, 
                    global::System.Nullable<decimal> DCShieldLifeCounter, 
                    global::System.Nullable<decimal> DCTargetLifeCounter, 
                    global::System.Nullable<decimal> FlexiCathMagnetPositionSensor, 
                    global::System.Nullable<decimal> GasVacuumSystemGas1Sensor, 
                    global::System.Nullable<decimal> GasVacuumSystemGas3Sensor, 
                    global::System.Nullable<decimal> GasVacuumSystemPressureReaderManagerPressure, 
                    global::System.Nullable<decimal> GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                    global::System.Nullable<decimal> MatchingSeriesCapacitorPositionSensor, 
                    global::System.Nullable<decimal> MatchingShuntCapacitorPositionSensor, 
                    global::System.Nullable<decimal> ProcessTimerTimeCorrection, 
                    global::System.Nullable<decimal> RFBiasDCVoltageSensor, 
                    global::System.Nullable<decimal> RFBiasLoadPowerCorrection, 
                    global::System.Nullable<decimal> RFBiasLoadPowerSensor, 
                    global::System.Nullable<decimal> RFBiasReflectedPowerSensor, 
                    string WaferIDRead, 
                    global::System.Nullable<decimal> zzEvent) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(ImportDate));
            if ((FileName == null)) {
                throw new global::System.ArgumentNullException("FileName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FileName));
            }
            if ((Filetpye == null)) {
                throw new global::System.ArgumentNullException("Filetpye");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Filetpye));
            }
            if ((Processmodul == null)) {
                throw new global::System.ArgumentNullException("Processmodul");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Processmodul));
            }
            if ((Lotnumber == null)) {
                throw new global::System.ArgumentNullException("Lotnumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Lotnumber));
            }
            if ((Slotnumber == null)) {
                throw new global::System.ArgumentNullException("Slotnumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Slotnumber));
            }
            if ((ProcessID == null)) {
                throw new global::System.ArgumentNullException("ProcessID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ProcessID));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(DateAndTime));
            if ((HeaderWaferID == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(HeaderWaferID));
            }
            if ((Recipe == null)) {
                throw new global::System.ArgumentNullException("Recipe");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Recipe));
            }
            if ((Machine_ID == null)) {
                throw new global::System.ArgumentNullException("Machine_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Machine_ID));
            }
            if ((PCName == null)) {
                throw new global::System.ArgumentNullException("PCName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(PCName));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(ParameterProcessTime));
            if ((ChuckDrivePositionCountActual.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(ChuckDrivePositionCountActual.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ChuckTempControlDCBiasActVoltage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(ChuckTempControlDCBiasActVoltage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ChuckTempControlSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(ChuckTempControlSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CurrentStepNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(CurrentStepNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((DCActualCurrent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(DCActualCurrent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((DCActualPower.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(DCActualPower.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((DCActualVoltage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(DCActualVoltage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((DCHardArcPerRun.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(DCHardArcPerRun.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((DCMicroArcPerRun.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(DCMicroArcPerRun.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((DCPowerCorrection.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(DCPowerCorrection.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((DCShieldLifeCounter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(DCShieldLifeCounter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((DCTargetLifeCounter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(DCTargetLifeCounter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((FlexiCathMagnetPositionSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(FlexiCathMagnetPositionSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemGas1Sensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(GasVacuumSystemGas1Sensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemGas3Sensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((decimal)(GasVacuumSystemGas3Sensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemPressureReaderManagerPressure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((decimal)(GasVacuumSystemPressureReaderManagerPressure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((decimal)(GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((MatchingSeriesCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((decimal)(MatchingSeriesCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((MatchingShuntCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(MatchingShuntCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ProcessTimerTimeCorrection.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((decimal)(ProcessTimerTimeCorrection.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((RFBiasDCVoltageSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((decimal)(RFBiasDCVoltageSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((RFBiasLoadPowerCorrection.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(RFBiasLoadPowerCorrection.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((RFBiasLoadPowerSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(RFBiasLoadPowerSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((RFBiasReflectedPowerSensor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((decimal)(RFBiasReflectedPowerSensor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((WaferIDRead == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(WaferIDRead));
            }
            if ((zzEvent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(zzEvent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime ImportDate, 
                    string FileName, 
                    string Filetpye, 
                    string Processmodul, 
                    string Lotnumber, 
                    string Slotnumber, 
                    string ProcessID, 
                    System.DateTime DateAndTime, 
                    string HeaderWaferID, 
                    string Recipe, 
                    string Machine_ID, 
                    string PCName, 
                    decimal ParameterProcessTime, 
                    global::System.Nullable<decimal> ChuckDrivePositionCountActual, 
                    global::System.Nullable<decimal> ChuckTempControlDCBiasActVoltage, 
                    global::System.Nullable<decimal> ChuckTempControlSensor, 
                    global::System.Nullable<decimal> CurrentStepNumber, 
                    global::System.Nullable<decimal> DCActualCurrent, 
                    global::System.Nullable<decimal> DCActualPower, 
                    global::System.Nullable<decimal> DCActualVoltage, 
                    global::System.Nullable<decimal> DCHardArcPerRun, 
                    global::System.Nullable<decimal> DCMicroArcPerRun, 
                    global::System.Nullable<decimal> DCPowerCorrection, 
                    global::System.Nullable<decimal> DCShieldLifeCounter, 
                    global::System.Nullable<decimal> DCTargetLifeCounter, 
                    global::System.Nullable<decimal> FlexiCathMagnetPositionSensor, 
                    global::System.Nullable<decimal> GasVacuumSystemGas1Sensor, 
                    global::System.Nullable<decimal> GasVacuumSystemGas3Sensor, 
                    global::System.Nullable<decimal> GasVacuumSystemPressureReaderManagerPressure, 
                    global::System.Nullable<decimal> GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                    global::System.Nullable<decimal> MatchingSeriesCapacitorPositionSensor, 
                    global::System.Nullable<decimal> MatchingShuntCapacitorPositionSensor, 
                    global::System.Nullable<decimal> ProcessTimerTimeCorrection, 
                    global::System.Nullable<decimal> RFBiasDCVoltageSensor, 
                    global::System.Nullable<decimal> RFBiasLoadPowerCorrection, 
                    global::System.Nullable<decimal> RFBiasLoadPowerSensor, 
                    global::System.Nullable<decimal> RFBiasReflectedPowerSensor, 
                    string WaferIDRead, 
                    global::System.Nullable<decimal> zzEvent, 
                    int Original_ID, 
                    System.DateTime Original_ImportDate, 
                    string Original_Filetpye, 
                    string Original_Processmodul, 
                    string Original_Lotnumber, 
                    string Original_Slotnumber, 
                    string Original_ProcessID, 
                    System.DateTime Original_DateAndTime, 
                    string Original_HeaderWaferID, 
                    string Original_Machine_ID, 
                    string Original_PCName, 
                    decimal Original_ParameterProcessTime, 
                    global::System.Nullable<decimal> Original_ChuckDrivePositionCountActual, 
                    global::System.Nullable<decimal> Original_ChuckTempControlDCBiasActVoltage, 
                    global::System.Nullable<decimal> Original_ChuckTempControlSensor, 
                    global::System.Nullable<decimal> Original_CurrentStepNumber, 
                    global::System.Nullable<decimal> Original_DCActualCurrent, 
                    global::System.Nullable<decimal> Original_DCActualPower, 
                    global::System.Nullable<decimal> Original_DCActualVoltage, 
                    global::System.Nullable<decimal> Original_DCHardArcPerRun, 
                    global::System.Nullable<decimal> Original_DCMicroArcPerRun, 
                    global::System.Nullable<decimal> Original_DCPowerCorrection, 
                    global::System.Nullable<decimal> Original_DCShieldLifeCounter, 
                    global::System.Nullable<decimal> Original_DCTargetLifeCounter, 
                    global::System.Nullable<decimal> Original_FlexiCathMagnetPositionSensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemGas1Sensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemGas3Sensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemPressureReaderManagerPressure, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                    global::System.Nullable<decimal> Original_MatchingSeriesCapacitorPositionSensor, 
                    global::System.Nullable<decimal> Original_MatchingShuntCapacitorPositionSensor, 
                    global::System.Nullable<decimal> Original_ProcessTimerTimeCorrection, 
                    global::System.Nullable<decimal> Original_RFBiasDCVoltageSensor, 
                    global::System.Nullable<decimal> Original_RFBiasLoadPowerCorrection, 
                    global::System.Nullable<decimal> Original_RFBiasLoadPowerSensor, 
                    global::System.Nullable<decimal> Original_RFBiasReflectedPowerSensor, 
                    string Original_WaferIDRead, 
                    global::System.Nullable<decimal> Original_zzEvent, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(ImportDate));
            if ((FileName == null)) {
                throw new global::System.ArgumentNullException("FileName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FileName));
            }
            if ((Filetpye == null)) {
                throw new global::System.ArgumentNullException("Filetpye");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Filetpye));
            }
            if ((Processmodul == null)) {
                throw new global::System.ArgumentNullException("Processmodul");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Processmodul));
            }
            if ((Lotnumber == null)) {
                throw new global::System.ArgumentNullException("Lotnumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Lotnumber));
            }
            if ((Slotnumber == null)) {
                throw new global::System.ArgumentNullException("Slotnumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Slotnumber));
            }
            if ((ProcessID == null)) {
                throw new global::System.ArgumentNullException("ProcessID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ProcessID));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(DateAndTime));
            if ((HeaderWaferID == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(HeaderWaferID));
            }
            if ((Recipe == null)) {
                throw new global::System.ArgumentNullException("Recipe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Recipe));
            }
            if ((Machine_ID == null)) {
                throw new global::System.ArgumentNullException("Machine_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Machine_ID));
            }
            if ((PCName == null)) {
                throw new global::System.ArgumentNullException("PCName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(PCName));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(ParameterProcessTime));
            if ((ChuckDrivePositionCountActual.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(ChuckDrivePositionCountActual.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ChuckTempControlDCBiasActVoltage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(ChuckTempControlDCBiasActVoltage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ChuckTempControlSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(ChuckTempControlSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CurrentStepNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(CurrentStepNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((DCActualCurrent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(DCActualCurrent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((DCActualPower.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(DCActualPower.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((DCActualVoltage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(DCActualVoltage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((DCHardArcPerRun.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(DCHardArcPerRun.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((DCMicroArcPerRun.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(DCMicroArcPerRun.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((DCPowerCorrection.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(DCPowerCorrection.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((DCShieldLifeCounter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(DCShieldLifeCounter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((DCTargetLifeCounter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(DCTargetLifeCounter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((FlexiCathMagnetPositionSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(FlexiCathMagnetPositionSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemGas1Sensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(GasVacuumSystemGas1Sensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemGas3Sensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(GasVacuumSystemGas3Sensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemPressureReaderManagerPressure.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(GasVacuumSystemPressureReaderManagerPressure.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((MatchingSeriesCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(MatchingSeriesCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((MatchingShuntCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(MatchingShuntCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ProcessTimerTimeCorrection.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(ProcessTimerTimeCorrection.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((RFBiasDCVoltageSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(RFBiasDCVoltageSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((RFBiasLoadPowerCorrection.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(RFBiasLoadPowerCorrection.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((RFBiasLoadPowerSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(RFBiasLoadPowerSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((RFBiasReflectedPowerSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(RFBiasReflectedPowerSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((WaferIDRead == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(WaferIDRead));
            }
            if ((zzEvent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(zzEvent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((System.DateTime)(Original_ImportDate));
            if ((Original_Filetpye == null)) {
                throw new global::System.ArgumentNullException("Original_Filetpye");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_Filetpye));
            }
            if ((Original_Processmodul == null)) {
                throw new global::System.ArgumentNullException("Original_Processmodul");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_Processmodul));
            }
            if ((Original_Lotnumber == null)) {
                throw new global::System.ArgumentNullException("Original_Lotnumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_Lotnumber));
            }
            if ((Original_Slotnumber == null)) {
                throw new global::System.ArgumentNullException("Original_Slotnumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Slotnumber));
            }
            if ((Original_ProcessID == null)) {
                throw new global::System.ArgumentNullException("Original_ProcessID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_ProcessID));
            }
            this.Adapter.UpdateCommand.Parameters[46].Value = ((System.DateTime)(Original_DateAndTime));
            if ((Original_HeaderWaferID == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_HeaderWaferID));
            }
            if ((Original_Machine_ID == null)) {
                throw new global::System.ArgumentNullException("Original_Machine_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_Machine_ID));
            }
            if ((Original_PCName == null)) {
                throw new global::System.ArgumentNullException("Original_PCName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_PCName));
            }
            this.Adapter.UpdateCommand.Parameters[51].Value = ((decimal)(Original_ParameterProcessTime));
            if ((Original_ChuckDrivePositionCountActual.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((decimal)(Original_ChuckDrivePositionCountActual.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_ChuckTempControlDCBiasActVoltage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((decimal)(Original_ChuckTempControlDCBiasActVoltage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_ChuckTempControlSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((decimal)(Original_ChuckTempControlSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_CurrentStepNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((decimal)(Original_CurrentStepNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_DCActualCurrent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((decimal)(Original_DCActualCurrent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((Original_DCActualPower.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((decimal)(Original_DCActualPower.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_DCActualVoltage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((decimal)(Original_DCActualVoltage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_DCHardArcPerRun.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((decimal)(Original_DCHardArcPerRun.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_DCMicroArcPerRun.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((decimal)(Original_DCMicroArcPerRun.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_DCPowerCorrection.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((decimal)(Original_DCPowerCorrection.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_DCShieldLifeCounter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((decimal)(Original_DCShieldLifeCounter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Original_DCTargetLifeCounter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((decimal)(Original_DCTargetLifeCounter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((Original_FlexiCathMagnetPositionSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((decimal)(Original_FlexiCathMagnetPositionSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemGas1Sensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((decimal)(Original_GasVacuumSystemGas1Sensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemGas3Sensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((decimal)(Original_GasVacuumSystemGas3Sensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemPressureReaderManagerPressure.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((decimal)(Original_GasVacuumSystemPressureReaderManagerPressure.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((decimal)(Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_MatchingSeriesCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((decimal)(Original_MatchingSeriesCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_MatchingShuntCapacitorPositionSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((decimal)(Original_MatchingShuntCapacitorPositionSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((Original_ProcessTimerTimeCorrection.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((decimal)(Original_ProcessTimerTimeCorrection.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasDCVoltageSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((decimal)(Original_RFBiasDCVoltageSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasLoadPowerCorrection.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((decimal)(Original_RFBiasLoadPowerCorrection.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasLoadPowerSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((decimal)(Original_RFBiasLoadPowerSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((Original_RFBiasReflectedPowerSensor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((decimal)(Original_RFBiasReflectedPowerSensor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            if ((Original_WaferIDRead == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((string)(Original_WaferIDRead));
            }
            if ((Original_zzEvent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((decimal)(Original_zzEvent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[104].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime ImportDate, 
                    string FileName, 
                    string Filetpye, 
                    string Processmodul, 
                    string Lotnumber, 
                    string Slotnumber, 
                    string ProcessID, 
                    System.DateTime DateAndTime, 
                    string HeaderWaferID, 
                    string Recipe, 
                    string Machine_ID, 
                    string PCName, 
                    decimal ParameterProcessTime, 
                    global::System.Nullable<decimal> ChuckDrivePositionCountActual, 
                    global::System.Nullable<decimal> ChuckTempControlDCBiasActVoltage, 
                    global::System.Nullable<decimal> ChuckTempControlSensor, 
                    global::System.Nullable<decimal> CurrentStepNumber, 
                    global::System.Nullable<decimal> DCActualCurrent, 
                    global::System.Nullable<decimal> DCActualPower, 
                    global::System.Nullable<decimal> DCActualVoltage, 
                    global::System.Nullable<decimal> DCHardArcPerRun, 
                    global::System.Nullable<decimal> DCMicroArcPerRun, 
                    global::System.Nullable<decimal> DCPowerCorrection, 
                    global::System.Nullable<decimal> DCShieldLifeCounter, 
                    global::System.Nullable<decimal> DCTargetLifeCounter, 
                    global::System.Nullable<decimal> FlexiCathMagnetPositionSensor, 
                    global::System.Nullable<decimal> GasVacuumSystemGas1Sensor, 
                    global::System.Nullable<decimal> GasVacuumSystemGas3Sensor, 
                    global::System.Nullable<decimal> GasVacuumSystemPressureReaderManagerPressure, 
                    global::System.Nullable<decimal> GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                    global::System.Nullable<decimal> MatchingSeriesCapacitorPositionSensor, 
                    global::System.Nullable<decimal> MatchingShuntCapacitorPositionSensor, 
                    global::System.Nullable<decimal> ProcessTimerTimeCorrection, 
                    global::System.Nullable<decimal> RFBiasDCVoltageSensor, 
                    global::System.Nullable<decimal> RFBiasLoadPowerCorrection, 
                    global::System.Nullable<decimal> RFBiasLoadPowerSensor, 
                    global::System.Nullable<decimal> RFBiasReflectedPowerSensor, 
                    string WaferIDRead, 
                    global::System.Nullable<decimal> zzEvent, 
                    int Original_ID, 
                    System.DateTime Original_ImportDate, 
                    string Original_Filetpye, 
                    string Original_Processmodul, 
                    string Original_Lotnumber, 
                    string Original_Slotnumber, 
                    string Original_ProcessID, 
                    System.DateTime Original_DateAndTime, 
                    string Original_HeaderWaferID, 
                    string Original_Machine_ID, 
                    string Original_PCName, 
                    decimal Original_ParameterProcessTime, 
                    global::System.Nullable<decimal> Original_ChuckDrivePositionCountActual, 
                    global::System.Nullable<decimal> Original_ChuckTempControlDCBiasActVoltage, 
                    global::System.Nullable<decimal> Original_ChuckTempControlSensor, 
                    global::System.Nullable<decimal> Original_CurrentStepNumber, 
                    global::System.Nullable<decimal> Original_DCActualCurrent, 
                    global::System.Nullable<decimal> Original_DCActualPower, 
                    global::System.Nullable<decimal> Original_DCActualVoltage, 
                    global::System.Nullable<decimal> Original_DCHardArcPerRun, 
                    global::System.Nullable<decimal> Original_DCMicroArcPerRun, 
                    global::System.Nullable<decimal> Original_DCPowerCorrection, 
                    global::System.Nullable<decimal> Original_DCShieldLifeCounter, 
                    global::System.Nullable<decimal> Original_DCTargetLifeCounter, 
                    global::System.Nullable<decimal> Original_FlexiCathMagnetPositionSensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemGas1Sensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemGas3Sensor, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemPressureReaderManagerPressure, 
                    global::System.Nullable<decimal> Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, 
                    global::System.Nullable<decimal> Original_MatchingSeriesCapacitorPositionSensor, 
                    global::System.Nullable<decimal> Original_MatchingShuntCapacitorPositionSensor, 
                    global::System.Nullable<decimal> Original_ProcessTimerTimeCorrection, 
                    global::System.Nullable<decimal> Original_RFBiasDCVoltageSensor, 
                    global::System.Nullable<decimal> Original_RFBiasLoadPowerCorrection, 
                    global::System.Nullable<decimal> Original_RFBiasLoadPowerSensor, 
                    global::System.Nullable<decimal> Original_RFBiasReflectedPowerSensor, 
                    string Original_WaferIDRead, 
                    global::System.Nullable<decimal> Original_zzEvent) {
            return this.Update(ImportDate, FileName, Filetpye, Processmodul, Lotnumber, Slotnumber, ProcessID, DateAndTime, HeaderWaferID, Recipe, Machine_ID, PCName, ParameterProcessTime, ChuckDrivePositionCountActual, ChuckTempControlDCBiasActVoltage, ChuckTempControlSensor, CurrentStepNumber, DCActualCurrent, DCActualPower, DCActualVoltage, DCHardArcPerRun, DCMicroArcPerRun, DCPowerCorrection, DCShieldLifeCounter, DCTargetLifeCounter, FlexiCathMagnetPositionSensor, GasVacuumSystemGas1Sensor, GasVacuumSystemGas3Sensor, GasVacuumSystemPressureReaderManagerPressure, GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, MatchingSeriesCapacitorPositionSensor, MatchingShuntCapacitorPositionSensor, ProcessTimerTimeCorrection, RFBiasDCVoltageSensor, RFBiasLoadPowerCorrection, RFBiasLoadPowerSensor, RFBiasReflectedPowerSensor, WaferIDRead, zzEvent, Original_ID, Original_ImportDate, Original_Filetpye, Original_Processmodul, Original_Lotnumber, Original_Slotnumber, Original_ProcessID, Original_DateAndTime, Original_HeaderWaferID, Original_Machine_ID, Original_PCName, Original_ParameterProcessTime, Original_ChuckDrivePositionCountActual, Original_ChuckTempControlDCBiasActVoltage, Original_ChuckTempControlSensor, Original_CurrentStepNumber, Original_DCActualCurrent, Original_DCActualPower, Original_DCActualVoltage, Original_DCHardArcPerRun, Original_DCMicroArcPerRun, Original_DCPowerCorrection, Original_DCShieldLifeCounter, Original_DCTargetLifeCounter, Original_FlexiCathMagnetPositionSensor, Original_GasVacuumSystemGas1Sensor, Original_GasVacuumSystemGas3Sensor, Original_GasVacuumSystemPressureReaderManagerPressure, Original_GasVacuumSystemPressureReaderManagerWiderangeGaugeSensor, Original_MatchingSeriesCapacitorPositionSensor, Original_MatchingShuntCapacitorPositionSensor, Original_ProcessTimerTimeCorrection, Original_RFBiasDCVoltageSensor, Original_RFBiasLoadPowerCorrection, Original_RFBiasLoadPowerSensor, Original_RFBiasReflectedPowerSensor, Original_WaferIDRead, Original_zzEvent, Original_ID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private SIO2_LogsTableAdapter _sIO2_LogsTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SIO2_LogsTableAdapter SIO2_LogsTableAdapter {
            get {
                return this._sIO2_LogsTableAdapter;
            }
            set {
                this._sIO2_LogsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._sIO2_LogsTableAdapter != null) 
                            && (this._sIO2_LogsTableAdapter.Connection != null))) {
                    return this._sIO2_LogsTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._sIO2_LogsTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(Machine_logDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._sIO2_LogsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SIO2_Logs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sIO2_LogsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(Machine_logDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._sIO2_LogsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SIO2_Logs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sIO2_LogsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(Machine_logDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._sIO2_LogsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SIO2_Logs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sIO2_LogsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(Machine_logDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._sIO2_LogsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sIO2_LogsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._sIO2_LogsTableAdapter != null)) {
                    revertConnections.Add(this._sIO2_LogsTableAdapter, this._sIO2_LogsTableAdapter.Connection);
                    this._sIO2_LogsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sIO2_LogsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sIO2_LogsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sIO2_LogsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sIO2_LogsTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._sIO2_LogsTableAdapter != null)) {
                    this._sIO2_LogsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sIO2_LogsTableAdapter]));
                    this._sIO2_LogsTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591